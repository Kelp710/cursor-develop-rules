---
description: **Coding (コーディング)**   - 作業内容: 設計およびテスト内容に基づいた実際のコーディング作業。
globs: 
alwaysApply: false
---

# Your rule content
# コマンド実行方針

- `cd`や`mkdir`、`touch`コマンドを使用する際は絶対パスで指定してください。

### コメントについて

- コメントを書くよりも、「読めば意味がわかるコード（self-explanatory code）」を書くことを優先する。コードが明確であれば、コメントは不要。
- コメントで *何をしているか* を説明するのは避けること。必要な場合に限り *なぜその処理が必要か* を説明する。
- `count++` に対して `// increment counter` のような、コードの内容をそのまま繰り返す冗長なコメントは避ける。
- コメントは **以下のような場合に限り書くべき**：
  - 適切な命名や構造を用いても、ロジックの意図が明確に伝わらないとき
  - パッと見て分かりにくいトレードオフ、アルゴリズムの工夫、またはパフォーマンス上のハックが使われているとき
  - `TODO` や `FIXME` などの重要な保留事項があるとき（ただし、必要性が明確で、行動可能な情報を含めること）

# 実装フェーズのフロー

## 1. ドキュメントの確認
- `comment.md`
- `command.md`

## 2. コード実装
- `docs/architecture/architecture.md`と`docs/architecture/task`と作成されたユニットテストを参考にテストが通るよう実装してください。

---

以上のフローが完了したら次のフェーズに移動します。

- You can @ files here
- You can use markdown but dont have to
